"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_middleware_1 = require("graphql-middleware");
const utils_1 = require("./utils");
const generator_1 = require("./generator");
const constructors_1 = require("./constructors");
/**
 *
 * @param options
 *
 * Makes sure all of defined rules are in accord with the options
 * shield can process.
 *
 */
function normalizeOptions(options) {
    if (options.whitelist !== undefined && options.fallbackRule !== undefined) {
        throw new Error('You specified both `whitelist` and `fallbackRule`. Please use one or the other.');
    }
    if (options.fallback !== undefined && options.fallbackError !== undefined) {
        throw new Error('You specified both `fallback` and `fallbackError`. Please use one or the other.');
    }
    if (typeof options.fallback === 'string') {
        options.fallback = new Error(options.fallback);
    }
    if (typeof options.fallbackError === 'string') {
        options.fallbackError = new Error(options.fallbackError);
    }
    return {
        debug: options.debug !== undefined ? options.debug : false,
        allowExternalErrors: options.allowExternalErrors !== undefined
            ? options.allowExternalErrors
            : false,
        whitelist: options.whitelist !== undefined ? options.whitelist : false,
        fallbackRule: options.fallbackRule !== undefined ? options.fallbackRule : constructors_1.allow,
        graphiql: options.graphiql !== undefined ? options.graphiql : false,
        fallback: undefined,
        fallbackError: options.fallbackError !== undefined
            ? options.fallbackError
            : options.fallback !== undefined
                ? options.fallback
                : new Error('Not Authorised!'),
    };
}
/**
 *
 * @param ruleTree
 * @param options
 *
 * Validates rules and generates middleware from defined rule tree.
 *
 */
function shield(ruleTree, options = {}) {
    const normalizedOptions = normalizeOptions(options);
    const validatedRuleTree = utils_1.validateRules(ruleTree);
    const generatorFunction = generator_1.generateMiddlewareGeneratorFromRuleTree(validatedRuleTree, normalizedOptions);
    return graphql_middleware_1.middleware(generatorFunction);
}
exports.shield = shield;
//# sourceMappingURL=shield.js.map