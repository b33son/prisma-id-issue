"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const graphql_middleware_1 = require("graphql-middleware");
const graphql_tools_1 = require("graphql-tools");
const validation_1 = require("../validation");
const __1 = require("../");
ava_1.default('Finds a type missing in schema and warns developer.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
   type Query {
     a: String!
   }
 `;
    const resolvers = {
        Query: {
            a: () => 'a',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = __1.shield({
        Query: __1.allow,
        Fail1: __1.allow,
        Fail2: __1.allow,
    });
    t.throws(() => {
        graphql_middleware_1.applyMiddleware(schema, permissions);
    }, {
        instanceOf: validation_1.ValidationError,
        message: `It seems like you have applied rules to Fail1, Fail2 types but Shield cannot find them in your schema.`,
    });
}));
ava_1.default('Finds the fields missing in schema and warns developer.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
   type Query {
     a: String!
   }
 `;
    const resolvers = {
        Query: {
            a: () => 'a',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = __1.shield({
        Query: {
            a: __1.allow,
            b: __1.allow,
            c: __1.allow,
        },
    });
    t.throws(() => {
        graphql_middleware_1.applyMiddleware(schema, permissions);
    }, {
        instanceOf: validation_1.ValidationError,
        message: 'It seems like you have applied rules to Query.b, Query.c fields but Shield cannot find them in your schema.',
    });
}));
//# sourceMappingURL=validation.test.js.map