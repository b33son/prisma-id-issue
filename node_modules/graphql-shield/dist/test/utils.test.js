"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const utils_1 = require("../utils");
const constructors_1 = require("../constructors");
const validation_1 = require("../validation");
ava_1.default('Extracts rules correctly', (t) => __awaiter(this, void 0, void 0, function* () {
    const rule1 = constructors_1.rule()(() => true);
    const rule2 = constructors_1.rule()(() => true);
    const rule3 = constructors_1.rule()(() => true);
    const rule4 = constructors_1.rule()(() => true);
    const rules = utils_1.extractRules({
        Query: {
            foo: rule1,
            bar: rule2,
        },
        Qux: constructors_1.and(rule1, rule2),
        Not: constructors_1.not(rule1),
        Oreo: constructors_1.or(rule1, rule2),
        Mutation: rule3,
        Bar: rule4,
    });
    t.deepEqual(rules, [rule1, rule2, rule3, rule4]);
}));
ava_1.default('Validates rules correctly, fails', (t) => __awaiter(this, void 0, void 0, function* () {
    const rule1 = constructors_1.rule('fail')(() => true);
    const rule2 = constructors_1.rule('fail')(() => true);
    const rule3 = constructors_1.rule()(() => true);
    const rule4 = constructors_1.rule()(() => true);
    t.throws(() => {
        utils_1.validateRules({
            Query: {
                foo: rule1,
                bar: rule2,
            },
            Mutation: rule3,
            Bar: rule4,
        });
    }, {
        instanceOf: validation_1.ValidationError,
        message: `Rule "fail" seems to point at two different things.`,
    });
}));
ava_1.default('Validates rules correctly, succeeds', (t) => __awaiter(this, void 0, void 0, function* () {
    const rule1 = constructors_1.rule()(() => true);
    const rule2 = constructors_1.rule()(() => true);
    const rule3 = constructors_1.rule()(() => true);
    const rule4 = constructors_1.rule()(() => true);
    const ruleTree = {
        Query: {
            foo: rule1,
            bar: rule2,
        },
        Mutation: rule3,
        Bar: rule4,
    };
    const validatedRuleTree = utils_1.validateRules(ruleTree);
    t.is(ruleTree, validatedRuleTree);
}));
ava_1.default('isRuleFunction, true.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.true(utils_1.isRuleFunction(constructors_1.rule()(() => true)));
    t.true(utils_1.isRuleFunction(constructors_1.and()));
}));
ava_1.default('isRuleFunction, false.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.false(utils_1.isRuleFunction(false));
}));
ava_1.default('isRule, true.', (t) => __awaiter(this, void 0, void 0, function* () {
    const pass = constructors_1.rule()(() => true);
    t.true(utils_1.isRule(pass));
}));
ava_1.default('isRule, false.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.false(utils_1.isRule(false));
}));
ava_1.default('isLogicRule, true.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.true(utils_1.isLogicRule(constructors_1.and()));
}));
ava_1.default('isLogicRule, false.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.false(utils_1.isLogicRule(false));
}));
ava_1.default('isRuleFieldMap, true.', (t) => __awaiter(this, void 0, void 0, function* () {
    const pass = constructors_1.rule()(() => true);
    t.true(utils_1.isRuleFieldMap({
        foo: pass,
        bar: pass,
    }));
}));
ava_1.default('isRuleFieldMap, false.', (t) => __awaiter(this, void 0, void 0, function* () {
    const pass = constructors_1.rule()(() => true);
    t.false(utils_1.isRuleFieldMap({
        foo: pass,
        bar: false,
    }));
}));
//# sourceMappingURL=utils.test.js.map