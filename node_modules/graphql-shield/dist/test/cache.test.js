"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const graphql_1 = require("graphql");
const graphql_middleware_1 = require("graphql-middleware");
const graphql_tools_1 = require("graphql-tools");
const index_1 = require("../index");
ava_1.default('Strict cache - Rule is called multiple times, based on different parent.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.plan(2 + 1);
    // Schema
    const typeDefs = `
    type Query {
      test: [Test!]!
    }

    type Test {
      value: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => [
                { value: 'pass-A' },
                { value: 'pass-A' },
                { value: 'pass-B' },
            ],
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule({ cache: 'strict' })(parent => {
        t.pass();
        return true;
    });
    const permissions = index_1.shield({
        Test: allow,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test {
        value
      }
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query, undefined, {});
    t.deepEqual(res, {
        data: {
            test: [{ value: 'pass-A' }, { value: 'pass-A' }, { value: 'pass-B' }],
        },
    });
}));
ava_1.default('Strict cache - Cache is normalised correctly, rule is called multiple times, based on different parent.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.plan(2 + 1);
    // Schema
    const typeDefs = `
    type Query {
      test: [Test!]!
    }

    type Test {
      value: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => [
                { value: 'pass-A' },
                { value: 'pass-A' },
                { value: 'pass-B' },
            ],
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule({ cache: true })(parent => {
        t.pass();
        return true;
    });
    const permissions = index_1.shield({
        Test: allow,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test {
        value
      }
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query, undefined, {});
    t.deepEqual(res, {
        data: {
            test: [{ value: 'pass-A' }, { value: 'pass-A' }, { value: 'pass-B' }],
        },
    });
}));
ava_1.default('Strict cache - Rule is called multiple times, based on different arguments.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.plan(3 + 1);
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c(arg: String): String!
      d(arg: String): String!
      e(arg: String): String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
            d: () => 'd',
            e: () => 'e',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule({ cache: 'strict' })(parent => {
        t.pass();
        return true;
    });
    const permissions = index_1.shield({
        Query: allow,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      a
      b
      c(arg: "foo")
      d(arg: "bar")
      e
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query, undefined, {});
    t.deepEqual(res, {
        data: {
            a: 'a',
            b: 'b',
            c: 'c',
            d: 'd',
            e: 'e',
        },
    });
}));
ava_1.default('Contextual Cache - rules get executed only once if reused.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.plan(2 + 1);
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c(arg: String): String!
      d(arg: String): String!
      e(arg: String): String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
            d: () => 'd',
            e: () => 'e',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const ruleOne = index_1.rule({ cache: 'contextual' })(parent => {
        t.pass();
        return true;
    });
    const ruleTwo = index_1.rule({ cache: 'contextual' })(parent => {
        t.pass();
        return true;
    });
    const permissions = index_1.shield({
        Query: {
            a: ruleOne,
            b: ruleOne,
            c: ruleOne,
            d: ruleTwo,
            e: ruleTwo,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      a
      b
      c(arg: "foo")
      d(arg: "bar")
      e
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query, undefined, {});
    t.deepEqual(res, {
        data: {
            a: 'a',
            b: 'b',
            c: 'c',
            d: 'd',
            e: 'e',
        },
    });
}));
ava_1.default('No Cache - rule is reexecuted every time.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.plan(5 + 1);
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c(arg: String): String!
      d(arg: String): String!
      e(arg: String): String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
            d: () => 'd',
            e: () => 'e',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule({ cache: 'no_cache' })(parent => {
        t.pass();
        return true;
    });
    const permissions = index_1.shield({
        Query: allow,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      a
      b
      c(arg: "foo")
      d(arg: "bar")
      e
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query, undefined, {});
    t.deepEqual(res, {
        data: {
            a: 'a',
            b: 'b',
            c: 'c',
            d: 'd',
            e: 'e',
        },
    });
}));
ava_1.default('No Cache - Cache is normalised correctly, rule is reexecuted every time.', (t) => __awaiter(this, void 0, void 0, function* () {
    t.plan(5 + 1);
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c(arg: String): String!
      d(arg: String): String!
      e(arg: String): String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
            d: () => 'd',
            e: () => 'e',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule({ cache: false })(parent => {
        t.pass();
        return true;
    });
    const permissions = index_1.shield({
        Query: allow,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      a
      b
      c(arg: "foo")
      d(arg: "bar")
      e
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query, undefined, {});
    t.deepEqual(res, {
        data: {
            a: 'a',
            b: 'b',
            c: 'c',
            d: 'd',
            e: 'e',
        },
    });
}));
//# sourceMappingURL=cache.test.js.map