"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const graphql_1 = require("graphql");
const graphql_middleware_1 = require("graphql-middleware");
const graphql_tools_1 = require("graphql-tools");
const index_1 = require("../index");
const rules_1 = require("../rules");
ava_1.default('Logic Allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.allow,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic Deny.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.deny,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
ava_1.default('Logic AND - all rules pass, allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.and(index_1.allow, index_1.allow, index_1.allow),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic AND - some rules pass, deny.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.and(index_1.allow, index_1.allow, index_1.deny),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
ava_1.default('Logic AND - some rules throw, deny.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const ruleError = index_1.rule()(() => {
        throw new Error();
    });
    const permissions = index_1.shield({
        Query: {
            test: index_1.and(index_1.allow, index_1.allow, ruleError),
        },
    }, {
        debug: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
ava_1.default('Logic AND - some rules return error, deny', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const testError = new Error('test');
    const ruleError = index_1.rule()(() => testError);
    const permissions = index_1.shield({
        Query: {
            test: index_1.and(index_1.allow, index_1.allow, ruleError),
        },
    }, {
        debug: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
    t.is(res.errors[0].message, testError.message);
}));
ava_1.default('Logic OR - some rules pass, allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.or(index_1.allow, index_1.allow, index_1.deny),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic OR - no rule passes, deny', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.or(index_1.deny, index_1.deny, index_1.deny),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
ava_1.default('Logic OR - some rules return error, deny', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const testError = new Error('test');
    const ruleError = index_1.rule()(() => testError);
    const permissions = index_1.shield({
        Query: {
            test: index_1.or(index_1.deny, index_1.deny, ruleError),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
    t.is(res.errors[0].message, testError.message);
}));
ava_1.default('Logic NOT - true -> false, deny.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.not(index_1.allow),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
ava_1.default('Logic NOT - false -> true, allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: index_1.not(index_1.deny),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic NOT - fallback error -> true, allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const fail = index_1.rule()((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        throw new Error();
    }));
    const permissions = index_1.shield({
        Query: {
            test: index_1.not(fail),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic NOT - custom error -> true, allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const fail = index_1.rule()((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return false;
    }));
    const permissions = index_1.shield({
        Query: {
            test: index_1.not(fail),
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic NOT - rule error -> true, allow.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const fail = index_1.rule()((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        throw new Error();
    }));
    const permissions = index_1.shield({
        Query: {
            test: index_1.not(fail),
        },
    }, {
        debug: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Logic rule by default resolves to false', (t) => __awaiter(this, void 0, void 0, function* () {
    const rule = new rules_1.LogicRule([]);
    const res = yield rule.resolve({}, {}, {}, {}, {
        allowExternalErrors: false,
        debug: false,
        whitelist: false,
        fallbackRule: undefined,
        graphiql: true,
        fallback: new Error(),
        fallbackError: new Error(),
    });
    t.false(res);
}));
//# sourceMappingURL=logic.test.js.map