"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const graphql_middleware_1 = require("graphql-middleware");
const graphql_tools_1 = require("graphql-tools");
const index_1 = require("../index");
ava_1.default('Extracts fragment from rule correctly.', (t) => __awaiter(this, void 0, void 0, function* () {
    const ruleWithFragment = index_1.rule({ fragment: 'pass' })(() => true);
    t.is(ruleWithFragment.extractFragment(), 'pass');
}));
ava_1.default('Extracts fragment from logic rule correctly.', (t) => __awaiter(this, void 0, void 0, function* () {
    const ruleWithNoFragment = index_1.rule()(() => true);
    const ruleWithFragmentA = index_1.rule({ fragment: 'pass-A' })(() => true);
    const ruleWithFragmentB = index_1.rule({ fragment: 'pass-B' })(() => true);
    const ruleWithFragmentC = index_1.rule({ fragment: 'pass-C' })(() => true);
    const logicRuleAND = index_1.and(ruleWithNoFragment, ruleWithFragmentA, ruleWithFragmentB);
    const logicRuleNOT = index_1.not(logicRuleAND);
    const logicRuleOR = index_1.or(ruleWithFragmentB, ruleWithFragmentC, logicRuleNOT);
    t.deepEqual(logicRuleOR.extractFragments(), [
        'pass-B',
        'pass-C',
        'pass-A',
        'pass-B',
    ]);
}));
ava_1.default('Applies rule-fragment correctly accross type.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c: String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const ruleWithFragment = index_1.rule({
        fragment: 'pass',
    })((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    }));
    const permissions = index_1.shield({
        Query: ruleWithFragment,
    });
    const { fragmentReplacements } = graphql_middleware_1.applyMiddleware(schema, permissions);
    t.deepEqual(fragmentReplacements, [
        {
            field: 'a',
            fragment: 'pass',
        },
        {
            field: 'b',
            fragment: 'pass',
        },
        {
            field: 'c',
            fragment: 'pass',
        },
    ]);
}));
ava_1.default('Applies logic rule fragments correctly accross type.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c: String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const logicRuleWithFragment = index_1.and(index_1.rule({
        fragment: 'logic-pass-A',
    })((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    })), index_1.rule({
        fragment: 'logic-pass-B',
    })((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    })));
    const permissions = index_1.shield({
        Query: logicRuleWithFragment,
    });
    const { fragmentReplacements } = graphql_middleware_1.applyMiddleware(schema, permissions);
    t.deepEqual(fragmentReplacements, [
        {
            field: 'a',
            fragment: 'logic-pass-A',
        },
        {
            field: 'a',
            fragment: 'logic-pass-B',
        },
        {
            field: 'b',
            fragment: 'logic-pass-A',
        },
        {
            field: 'b',
            fragment: 'logic-pass-B',
        },
        {
            field: 'c',
            fragment: 'logic-pass-A',
        },
        {
            field: 'c',
            fragment: 'logic-pass-B',
        },
    ]);
}));
ava_1.default('Applies rule-fragment correctly to a specific field.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c: String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const ruleWithFragment = index_1.rule({
        fragment: 'pass',
    })((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    }));
    const permissions = index_1.shield({
        Query: {
            a: ruleWithFragment,
        },
    });
    const { fragmentReplacements } = graphql_middleware_1.applyMiddleware(schema, permissions);
    t.deepEqual(fragmentReplacements, [
        {
            field: 'a',
            fragment: 'pass',
        },
    ]);
}));
ava_1.default('Applies logic rule-fragment correctly to a specific field.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      a: String!
      b: String!
      c: String!
    }
  `;
    const resolvers = {
        Query: {
            a: () => 'a',
            b: () => 'b',
            c: () => 'c',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const logicRuleWithFragment = index_1.and(index_1.rule({
        fragment: 'logic-pass-A',
    })((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    })), index_1.rule({
        fragment: 'logic-pass-B',
    })((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    })));
    const permissions = index_1.shield({
        Query: {
            a: logicRuleWithFragment,
        },
    });
    const { fragmentReplacements } = graphql_middleware_1.applyMiddleware(schema, permissions);
    t.deepEqual(fragmentReplacements, [
        {
            field: 'a',
            fragment: 'logic-pass-A',
        },
        {
            field: 'a',
            fragment: 'logic-pass-B',
        },
    ]);
}));
//# sourceMappingURL=fragments.test.js.map