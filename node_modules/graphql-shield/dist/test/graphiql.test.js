"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const graphql_1 = require("graphql");
const graphql_middleware_1 = require("graphql-middleware");
const graphql_tools_1 = require("graphql-tools");
const index_1 = require("../index");
const constructors_1 = require("../constructors");
ava_1.default('GraphiQL introspection query works.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
      type: TestType!
    }

    type TestType {
      fieldString: String!
      fieldInt: Int!
    }
  `;
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers: {},
    });
    // Permissions
    const permissions = index_1.shield({}, {
        fallbackRule: constructors_1.deny,
        graphiql: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const res = yield graphql_1.graphql(schemaWithPermissions, graphql_1.getIntrospectionQuery());
    t.deepEqual(res.errors, undefined);
}));
ava_1.default('GraphiQL normal query works.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: constructors_1.allow,
        },
    }, {
        whitelist: true,
        graphiql: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res.data, {
        test: 'pass',
    });
}));
ava_1.default('GraphiQL introspection query works with fallbackRule set to deny.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
      type: TestType!
    }

    type TestType {
      fieldString: String!
      fieldInt: Int!
    }
  `;
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers: {},
    });
    // Permissions
    const permissions = index_1.shield({}, {
        whitelist: true,
        graphiql: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const res = yield graphql_1.graphql(schemaWithPermissions, graphql_1.getIntrospectionQuery());
    t.deepEqual(res.errors, undefined);
}));
ava_1.default('GraphiQL normal query works with fallbackRule set to deny.', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const permissions = index_1.shield({
        Query: {
            test: constructors_1.allow,
        },
    }, {
        fallbackRule: constructors_1.deny,
        graphiql: true,
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res.data, {
        test: 'pass',
    });
}));
//# sourceMappingURL=graphiql.test.js.map