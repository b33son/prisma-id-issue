"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const graphql_1 = require("graphql");
const graphql_middleware_1 = require("graphql-middleware");
const graphql_tools_1 = require("graphql-tools");
const index_1 = require("../index");
ava_1.default('Rule allow access (promise).', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule()((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return true;
    }));
    const permissions = index_1.shield({
        Query: {
            test: allow,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Rule allow access (immediate).', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const allow = index_1.rule()((parent, args, ctx, info) => {
        return true;
    });
    const permissions = index_1.shield({
        Query: {
            test: allow,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.deepEqual(res, {
        data: {
            test: 'pass',
        },
    });
}));
ava_1.default('Rule deny access (promise).', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const deny = index_1.rule()((parent, args, ctx, info) => __awaiter(this, void 0, void 0, function* () {
        return false;
    }));
    const permissions = index_1.shield({
        Query: {
            test: deny,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
ava_1.default('Rule deny access (immediate).', (t) => __awaiter(this, void 0, void 0, function* () {
    // Schema
    const typeDefs = `
    type Query {
      test: String!
    }
  `;
    const resolvers = {
        Query: {
            test: () => 'pass',
        },
    };
    const schema = graphql_tools_1.makeExecutableSchema({
        typeDefs,
        resolvers,
    });
    // Permissions
    const deny = index_1.rule()((parent, args, ctx, info) => {
        return false;
    });
    const permissions = index_1.shield({
        Query: {
            test: deny,
        },
    });
    const schemaWithPermissions = graphql_middleware_1.applyMiddleware(schema, permissions);
    // Execution
    const query = `
    query {
      test
    }
  `;
    const res = yield graphql_1.graphql(schemaWithPermissions, query);
    t.is(res.data, null);
}));
//# sourceMappingURL=index.test.js.map