"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../src/datamodel/model");
var renderer_1 = require("../../src/datamodel/renderer");
var parser_1 = require("../../src/datamodel/parser");
var databaseType_1 = require("../../src/databaseType");
var renderer = renderer_1.default.create(databaseType_1.DatabaseType.postgres);
var parser = parser_1.default.create(databaseType_1.DatabaseType.postgres);
var simpleModel = "type User {\n    name: String\n    age: int\n    isAdmin: Boolean @default(value: false)\n    nationality: String @default(value: \"DE\")\n    roles: [Int!]!\n}";
describe("Renderer test", function () {
    test('Renderer a single type with scalars and default value correctly.', function () {
        var fieldWithDefaultValue = new model_1.GQLScalarField('isAdmin', 'Boolean');
        fieldWithDefaultValue.defaultValue = 'false';
        var fieldWithStringDefaultValue = new model_1.GQLScalarField('nationality', 'String');
        fieldWithStringDefaultValue.defaultValue = 'DE';
        var listField = new model_1.GQLScalarField('roles', 'Int');
        listField.isList = true;
        var model = {
            fields: [
                new model_1.GQLScalarField('name', 'String'),
                new model_1.GQLScalarField('age', 'int'),
                fieldWithDefaultValue,
                fieldWithStringDefaultValue,
                listField
            ],
            name: 'User',
            isEmbedded: false,
            isEnum: false
        };
        var res = renderer.render({
            types: [model]
        });
        expect(res).toEqual(simpleModel);
    });
    test('Render a single type consistently with the parser', function () {
        var parsed = parser.parseFromSchemaString(simpleModel);
        var rendered = renderer.render(parsed);
        expect(rendered).toEqual(simpleModel);
    });
});
//# sourceMappingURL=base.js.map