// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Location,
  Post,
  Campaign,
  Org,
  Media,
  AuthPayload
} from "../types";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsGetUsersInCampaign {
    id: string | null;
  }

  export interface ArgsGetUser {
    id: string;
  }

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type GetUsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type GetUsersInCampaignResolver = (
    parent: undefined,
    args: ArgsGetUsersInCampaign,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type GetUserResolver = (
    parent: undefined,
    args: ArgsGetUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    getUsers: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    getUsersInCampaign: (
      parent: undefined,
      args: ArgsGetUsersInCampaign,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    getUser: (
      parent: undefined,
      args: ArgsGetUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    id: (parent: User) => parent.id,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    phone: (parent: User) => (parent.phone === undefined ? null : parent.phone),
    profileImgUrl: (parent: User) =>
      parent.profileImgUrl === undefined ? null : parent.profileImgUrl,
    facebookHandle: (parent: User) =>
      parent.facebookHandle === undefined ? null : parent.facebookHandle,
    instagramHandle: (parent: User) =>
      parent.instagramHandle === undefined ? null : parent.instagramHandle,
    twitterHandle: (parent: User) =>
      parent.twitterHandle === undefined ? null : parent.twitterHandle,
    snapchatHandle: (parent: User) =>
      parent.snapchatHandle === undefined ? null : parent.snapchatHandle
  };

  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PhoneResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ProfileImgUrlResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type FacebookHandleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type InstagramHandleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TwitterHandleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type SnapchatHandleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LocationsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location[] | Promise<Location[]>;

  export type OrgsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Org[] | Promise<Org[]>;

  export type OrgsAsOwnerResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Org[] | Promise<Org[]>;

  export type OrgsAsAdminResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Org[] | Promise<Org[]>;

  export type CampaignsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Campaign[] | Promise<Campaign[]>;

  export type CampaignsAsLeadResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Campaign[] | Promise<Campaign[]>;

  export type PostsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export interface Type {
    createdAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    phone: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    profileImgUrl: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    facebookHandle: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    instagramHandle: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    twitterHandle: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    snapchatHandle: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    locations: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location[] | Promise<Location[]>;

    orgs: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Org[] | Promise<Org[]>;

    orgsAsOwner: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Org[] | Promise<Org[]>;

    orgsAsAdmin: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Org[] | Promise<Org[]>;

    campaigns: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Campaign[] | Promise<Campaign[]>;

    campaignsAsLead: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Campaign[] | Promise<Campaign[]>;

    posts: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;
  }
}

export namespace LocationResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Location) => parent.createdAt,
    updatedAt: (parent: Location) => parent.updatedAt,
    id: (parent: Location) => parent.id,
    name: (parent: Location) =>
      parent.name === undefined ? null : parent.name,
    street: (parent: Location) =>
      parent.street === undefined ? null : parent.street,
    city: (parent: Location) =>
      parent.city === undefined ? null : parent.city,
    region: (parent: Location) =>
      parent.region === undefined ? null : parent.region,
    country: (parent: Location) =>
      parent.country === undefined ? null : parent.country,
    isoCountryCode: (parent: Location) =>
      parent.isoCountryCode === undefined ? null : parent.isoCountryCode,
    postalCode: (parent: Location) =>
      parent.postalCode === undefined ? null : parent.postalCode,
    long: (parent: Location) =>
      parent.long === undefined ? null : parent.long,
    lat: (parent: Location) => (parent.lat === undefined ? null : parent.lat)
  };

  export type CreatedAtResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type StreetResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CityResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RegionResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CountryResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IsoCountryCodeResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PostalCodeResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LongResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LatResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UserResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type PostResolver = (
    parent: Location,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export interface Type {
    createdAt: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    street: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    city: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    region: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    country: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    isoCountryCode: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    postalCode: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    long: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    lat: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    user: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    post: (
      parent: Location,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Post) => parent.createdAt,
    updatedAt: (parent: Post) => parent.updatedAt,
    id: (parent: Post) => parent.id,
    name: (parent: Post) => (parent.name === undefined ? null : parent.name),
    caption: (parent: Post) =>
      parent.caption === undefined ? null : parent.caption
  };

  export type CreatedAtResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CaptionResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type OwnerResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type CampaignResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Campaign | null | Promise<Campaign | null>;

  export type OrgResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Org | null | Promise<Org | null>;

  export type MediasResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Media[] | Promise<Media[]>;

  export type LocationResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Location | null | Promise<Location | null>;

  export interface Type {
    createdAt: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    caption: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    owner: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    campaign: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Campaign | null | Promise<Campaign | null>;

    org: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Org | null | Promise<Org | null>;

    medias: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Media[] | Promise<Media[]>;

    location: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Location | null | Promise<Location | null>;
  }
}

export namespace CampaignResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Campaign) => parent.createdAt,
    updatedAt: (parent: Campaign) => parent.updatedAt,
    id: (parent: Campaign) => parent.id,
    name: (parent: Campaign) =>
      parent.name === undefined ? null : parent.name,
    instructions: (parent: Campaign) =>
      parent.instructions === undefined ? null : parent.instructions,
    startDateTime: (parent: Campaign) =>
      parent.startDateTime === undefined ? null : parent.startDateTime,
    endDateTime: (parent: Campaign) =>
      parent.endDateTime === undefined ? null : parent.endDateTime
  };

  export type CreatedAtResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type InstructionsResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type StartDateTimeResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EndDateTimeResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CampaignLeadsResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type CampaignMembersResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type OrgsResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Org[] | Promise<Org[]>;

  export type PostsResolver = (
    parent: Campaign,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export interface Type {
    createdAt: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    instructions: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    startDateTime: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    endDateTime: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    campaignLeads: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    campaignMembers: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    orgs: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Org[] | Promise<Org[]>;

    posts: (
      parent: Campaign,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;
  }
}

export namespace OrgResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Org) => parent.createdAt,
    updatedAt: (parent: Org) => parent.updatedAt,
    id: (parent: Org) => parent.id,
    name: (parent: Org) => (parent.name === undefined ? null : parent.name)
  };

  export type CreatedAtResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type OwnerResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type OrgAdminsResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type OrgMembersResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type CampaignsResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Campaign[] | Promise<Campaign[]>;

  export type PostsResolver = (
    parent: Org,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export interface Type {
    createdAt: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    owner: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    orgAdmins: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    orgMembers: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    campaigns: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Campaign[] | Promise<Campaign[]>;

    posts: (
      parent: Org,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;
  }
}

export namespace MediaResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Media) => parent.createdAt,
    updatedAt: (parent: Media) => parent.updatedAt,
    id: (parent: Media) => parent.id,
    name: (parent: Media) => (parent.name === undefined ? null : parent.name),
    contentType: (parent: Media) => parent.contentType,
    url: (parent: Media) => parent.url,
    secret: (parent: Media) =>
      parent.secret === undefined ? null : parent.secret
  };

  export type CreatedAtResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PostResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type ContentTypeResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SecretResolver = (
    parent: Media,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    createdAt: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    post: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    contentType: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    secret: (
      parent: Media,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
    name: string | null;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsCreateOrg {
    name: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type CreateOrgResolver = (
    parent: undefined,
    args: ArgsCreateOrg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Org | Promise<Org>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    createOrg: (
      parent: undefined,
      args: ArgsCreateOrg,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Org | Promise<Org>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Location: LocationResolvers.Type;
  Post: PostResolvers.Type;
  Campaign: CampaignResolvers.Type;
  Org: OrgResolvers.Type;
  Media: MediaResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}
