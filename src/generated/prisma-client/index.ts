// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  campaign: (where?: CampaignWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  media: (where?: MediaWhereInput) => Promise<boolean>;
  org: (where?: OrgWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  campaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  campaigns: (
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Campaign>;
  campaignsConnection: (
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CampaignConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationPromise;
  locations: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Location>;
  locationsConnection: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocationConnectionPromise;
  media: (where: MediaWhereUniqueInput) => MediaPromise;
  medias: (
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Media>;
  mediasConnection: (
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MediaConnectionPromise;
  org: (where: OrgWhereUniqueInput) => OrgPromise;
  orgs: (
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Org>;
  orgsConnection: (
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrgConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCampaign: (data: CampaignCreateInput) => CampaignPromise;
  updateCampaign: (
    args: { data: CampaignUpdateInput; where: CampaignWhereUniqueInput }
  ) => CampaignPromise;
  updateManyCampaigns: (
    args: { data: CampaignUpdateManyMutationInput; where?: CampaignWhereInput }
  ) => BatchPayloadPromise;
  upsertCampaign: (
    args: {
      where: CampaignWhereUniqueInput;
      create: CampaignCreateInput;
      update: CampaignUpdateInput;
    }
  ) => CampaignPromise;
  deleteCampaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  deleteManyCampaigns: (where?: CampaignWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (
    args: { data: LocationUpdateInput; where: LocationWhereUniqueInput }
  ) => LocationPromise;
  updateManyLocations: (
    args: { data: LocationUpdateManyMutationInput; where?: LocationWhereInput }
  ) => BatchPayloadPromise;
  upsertLocation: (
    args: {
      where: LocationWhereUniqueInput;
      create: LocationCreateInput;
      update: LocationUpdateInput;
    }
  ) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMedia: (data: MediaCreateInput) => MediaPromise;
  updateMedia: (
    args: { data: MediaUpdateInput; where: MediaWhereUniqueInput }
  ) => MediaPromise;
  updateManyMedias: (
    args: { data: MediaUpdateManyMutationInput; where?: MediaWhereInput }
  ) => BatchPayloadPromise;
  upsertMedia: (
    args: {
      where: MediaWhereUniqueInput;
      create: MediaCreateInput;
      update: MediaUpdateInput;
    }
  ) => MediaPromise;
  deleteMedia: (where: MediaWhereUniqueInput) => MediaPromise;
  deleteManyMedias: (where?: MediaWhereInput) => BatchPayloadPromise;
  createOrg: (data: OrgCreateInput) => OrgPromise;
  updateOrg: (
    args: { data: OrgUpdateInput; where: OrgWhereUniqueInput }
  ) => OrgPromise;
  updateManyOrgs: (
    args: { data: OrgUpdateManyMutationInput; where?: OrgWhereInput }
  ) => BatchPayloadPromise;
  upsertOrg: (
    args: {
      where: OrgWhereUniqueInput;
      create: OrgCreateInput;
      update: OrgUpdateInput;
    }
  ) => OrgPromise;
  deleteOrg: (where: OrgWhereUniqueInput) => OrgPromise;
  deleteManyOrgs: (where?: OrgWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  campaign: (
    where?: CampaignSubscriptionWhereInput
  ) => CampaignSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  media: (
    where?: MediaSubscriptionWhereInput
  ) => MediaSubscriptionPayloadSubscription;
  org: (
    where?: OrgSubscriptionWhereInput
  ) => OrgSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "profileImgUrl_ASC"
  | "profileImgUrl_DESC"
  | "facebookHandle_ASC"
  | "facebookHandle_DESC"
  | "instagramHandle_ASC"
  | "instagramHandle_DESC"
  | "twitterHandle_ASC"
  | "twitterHandle_DESC"
  | "snapchatHandle_ASC"
  | "snapchatHandle_DESC";

export type LocationOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "street_ASC"
  | "street_DESC"
  | "city_ASC"
  | "city_DESC"
  | "region_ASC"
  | "region_DESC"
  | "country_ASC"
  | "country_DESC"
  | "isoCountryCode_ASC"
  | "isoCountryCode_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "long_ASC"
  | "long_DESC"
  | "lat_ASC"
  | "lat_DESC";

export type CampaignOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "instructions_ASC"
  | "instructions_DESC"
  | "startDateTime_ASC"
  | "startDateTime_DESC"
  | "endDateTime_ASC"
  | "endDateTime_DESC";

export type PostOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "caption_ASC"
  | "caption_DESC";

export type MediaOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "contentType_ASC"
  | "contentType_DESC"
  | "url_ASC"
  | "url_DESC"
  | "secret_ASC"
  | "secret_DESC";

export type OrgOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CampaignWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface UserWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  profileImgUrl?: String;
  profileImgUrl_not?: String;
  profileImgUrl_in?: String[] | String;
  profileImgUrl_not_in?: String[] | String;
  profileImgUrl_lt?: String;
  profileImgUrl_lte?: String;
  profileImgUrl_gt?: String;
  profileImgUrl_gte?: String;
  profileImgUrl_contains?: String;
  profileImgUrl_not_contains?: String;
  profileImgUrl_starts_with?: String;
  profileImgUrl_not_starts_with?: String;
  profileImgUrl_ends_with?: String;
  profileImgUrl_not_ends_with?: String;
  facebookHandle?: String;
  facebookHandle_not?: String;
  facebookHandle_in?: String[] | String;
  facebookHandle_not_in?: String[] | String;
  facebookHandle_lt?: String;
  facebookHandle_lte?: String;
  facebookHandle_gt?: String;
  facebookHandle_gte?: String;
  facebookHandle_contains?: String;
  facebookHandle_not_contains?: String;
  facebookHandle_starts_with?: String;
  facebookHandle_not_starts_with?: String;
  facebookHandle_ends_with?: String;
  facebookHandle_not_ends_with?: String;
  instagramHandle?: String;
  instagramHandle_not?: String;
  instagramHandle_in?: String[] | String;
  instagramHandle_not_in?: String[] | String;
  instagramHandle_lt?: String;
  instagramHandle_lte?: String;
  instagramHandle_gt?: String;
  instagramHandle_gte?: String;
  instagramHandle_contains?: String;
  instagramHandle_not_contains?: String;
  instagramHandle_starts_with?: String;
  instagramHandle_not_starts_with?: String;
  instagramHandle_ends_with?: String;
  instagramHandle_not_ends_with?: String;
  twitterHandle?: String;
  twitterHandle_not?: String;
  twitterHandle_in?: String[] | String;
  twitterHandle_not_in?: String[] | String;
  twitterHandle_lt?: String;
  twitterHandle_lte?: String;
  twitterHandle_gt?: String;
  twitterHandle_gte?: String;
  twitterHandle_contains?: String;
  twitterHandle_not_contains?: String;
  twitterHandle_starts_with?: String;
  twitterHandle_not_starts_with?: String;
  twitterHandle_ends_with?: String;
  twitterHandle_not_ends_with?: String;
  snapchatHandle?: String;
  snapchatHandle_not?: String;
  snapchatHandle_in?: String[] | String;
  snapchatHandle_not_in?: String[] | String;
  snapchatHandle_lt?: String;
  snapchatHandle_lte?: String;
  snapchatHandle_gt?: String;
  snapchatHandle_gte?: String;
  snapchatHandle_contains?: String;
  snapchatHandle_not_contains?: String;
  snapchatHandle_starts_with?: String;
  snapchatHandle_not_starts_with?: String;
  snapchatHandle_ends_with?: String;
  snapchatHandle_not_ends_with?: String;
  locations_every?: LocationWhereInput;
  locations_some?: LocationWhereInput;
  locations_none?: LocationWhereInput;
  orgs_every?: OrgWhereInput;
  orgs_some?: OrgWhereInput;
  orgs_none?: OrgWhereInput;
  orgsAsOwner_every?: OrgWhereInput;
  orgsAsOwner_some?: OrgWhereInput;
  orgsAsOwner_none?: OrgWhereInput;
  orgsAsAdmin_every?: OrgWhereInput;
  orgsAsAdmin_some?: OrgWhereInput;
  orgsAsAdmin_none?: OrgWhereInput;
  campaigns_every?: CampaignWhereInput;
  campaigns_some?: CampaignWhereInput;
  campaigns_none?: CampaignWhereInput;
  campaignsAsLead_every?: CampaignWhereInput;
  campaignsAsLead_some?: CampaignWhereInput;
  campaignsAsLead_none?: CampaignWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LocationWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  region?: String;
  region_not?: String;
  region_in?: String[] | String;
  region_not_in?: String[] | String;
  region_lt?: String;
  region_lte?: String;
  region_gt?: String;
  region_gte?: String;
  region_contains?: String;
  region_not_contains?: String;
  region_starts_with?: String;
  region_not_starts_with?: String;
  region_ends_with?: String;
  region_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  isoCountryCode?: String;
  isoCountryCode_not?: String;
  isoCountryCode_in?: String[] | String;
  isoCountryCode_not_in?: String[] | String;
  isoCountryCode_lt?: String;
  isoCountryCode_lte?: String;
  isoCountryCode_gt?: String;
  isoCountryCode_gte?: String;
  isoCountryCode_contains?: String;
  isoCountryCode_not_contains?: String;
  isoCountryCode_starts_with?: String;
  isoCountryCode_not_starts_with?: String;
  isoCountryCode_ends_with?: String;
  isoCountryCode_not_ends_with?: String;
  postalCode?: String;
  postalCode_not?: String;
  postalCode_in?: String[] | String;
  postalCode_not_in?: String[] | String;
  postalCode_lt?: String;
  postalCode_lte?: String;
  postalCode_gt?: String;
  postalCode_gte?: String;
  postalCode_contains?: String;
  postalCode_not_contains?: String;
  postalCode_starts_with?: String;
  postalCode_not_starts_with?: String;
  postalCode_ends_with?: String;
  postalCode_not_ends_with?: String;
  long?: String;
  long_not?: String;
  long_in?: String[] | String;
  long_not_in?: String[] | String;
  long_lt?: String;
  long_lte?: String;
  long_gt?: String;
  long_gte?: String;
  long_contains?: String;
  long_not_contains?: String;
  long_starts_with?: String;
  long_not_starts_with?: String;
  long_ends_with?: String;
  long_not_ends_with?: String;
  lat?: String;
  lat_not?: String;
  lat_in?: String[] | String;
  lat_not_in?: String[] | String;
  lat_lt?: String;
  lat_lte?: String;
  lat_gt?: String;
  lat_gte?: String;
  lat_contains?: String;
  lat_not_contains?: String;
  lat_starts_with?: String;
  lat_not_starts_with?: String;
  lat_ends_with?: String;
  lat_not_ends_with?: String;
  user?: UserWhereInput;
  post?: PostWhereInput;
  AND?: LocationWhereInput[] | LocationWhereInput;
  OR?: LocationWhereInput[] | LocationWhereInput;
  NOT?: LocationWhereInput[] | LocationWhereInput;
}

export interface PostWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  caption?: String;
  caption_not?: String;
  caption_in?: String[] | String;
  caption_not_in?: String[] | String;
  caption_lt?: String;
  caption_lte?: String;
  caption_gt?: String;
  caption_gte?: String;
  caption_contains?: String;
  caption_not_contains?: String;
  caption_starts_with?: String;
  caption_not_starts_with?: String;
  caption_ends_with?: String;
  caption_not_ends_with?: String;
  owner?: UserWhereInput;
  campaign?: CampaignWhereInput;
  org?: OrgWhereInput;
  medias_every?: MediaWhereInput;
  medias_some?: MediaWhereInput;
  medias_none?: MediaWhereInput;
  location?: LocationWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface CampaignWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  instructions?: String;
  instructions_not?: String;
  instructions_in?: String[] | String;
  instructions_not_in?: String[] | String;
  instructions_lt?: String;
  instructions_lte?: String;
  instructions_gt?: String;
  instructions_gte?: String;
  instructions_contains?: String;
  instructions_not_contains?: String;
  instructions_starts_with?: String;
  instructions_not_starts_with?: String;
  instructions_ends_with?: String;
  instructions_not_ends_with?: String;
  startDateTime?: DateTimeInput;
  startDateTime_not?: DateTimeInput;
  startDateTime_in?: DateTimeInput[] | DateTimeInput;
  startDateTime_not_in?: DateTimeInput[] | DateTimeInput;
  startDateTime_lt?: DateTimeInput;
  startDateTime_lte?: DateTimeInput;
  startDateTime_gt?: DateTimeInput;
  startDateTime_gte?: DateTimeInput;
  endDateTime?: DateTimeInput;
  endDateTime_not?: DateTimeInput;
  endDateTime_in?: DateTimeInput[] | DateTimeInput;
  endDateTime_not_in?: DateTimeInput[] | DateTimeInput;
  endDateTime_lt?: DateTimeInput;
  endDateTime_lte?: DateTimeInput;
  endDateTime_gt?: DateTimeInput;
  endDateTime_gte?: DateTimeInput;
  campaignLeads_every?: UserWhereInput;
  campaignLeads_some?: UserWhereInput;
  campaignLeads_none?: UserWhereInput;
  campaignMembers_every?: UserWhereInput;
  campaignMembers_some?: UserWhereInput;
  campaignMembers_none?: UserWhereInput;
  orgs_every?: OrgWhereInput;
  orgs_some?: OrgWhereInput;
  orgs_none?: OrgWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: CampaignWhereInput[] | CampaignWhereInput;
  OR?: CampaignWhereInput[] | CampaignWhereInput;
  NOT?: CampaignWhereInput[] | CampaignWhereInput;
}

export interface OrgWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  owner?: UserWhereInput;
  orgAdmins_every?: UserWhereInput;
  orgAdmins_some?: UserWhereInput;
  orgAdmins_none?: UserWhereInput;
  orgMembers_every?: UserWhereInput;
  orgMembers_some?: UserWhereInput;
  orgMembers_none?: UserWhereInput;
  campaigns_every?: CampaignWhereInput;
  campaigns_some?: CampaignWhereInput;
  campaigns_none?: CampaignWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: OrgWhereInput[] | OrgWhereInput;
  OR?: OrgWhereInput[] | OrgWhereInput;
  NOT?: OrgWhereInput[] | OrgWhereInput;
}

export interface MediaWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  post?: PostWhereInput;
  contentType?: String;
  contentType_not?: String;
  contentType_in?: String[] | String;
  contentType_not_in?: String[] | String;
  contentType_lt?: String;
  contentType_lte?: String;
  contentType_gt?: String;
  contentType_gte?: String;
  contentType_contains?: String;
  contentType_not_contains?: String;
  contentType_starts_with?: String;
  contentType_not_starts_with?: String;
  contentType_ends_with?: String;
  contentType_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  secret?: String;
  secret_not?: String;
  secret_in?: String[] | String;
  secret_not_in?: String[] | String;
  secret_lt?: String;
  secret_lte?: String;
  secret_gt?: String;
  secret_gte?: String;
  secret_contains?: String;
  secret_not_contains?: String;
  secret_starts_with?: String;
  secret_not_starts_with?: String;
  secret_ends_with?: String;
  secret_not_ends_with?: String;
  AND?: MediaWhereInput[] | MediaWhereInput;
  OR?: MediaWhereInput[] | MediaWhereInput;
  NOT?: MediaWhereInput[] | MediaWhereInput;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type MediaWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type OrgWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: UUID;
  email?: String;
}>;

export interface CampaignCreateInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserCreateManyWithoutCampaignsAsLeadInput;
  campaignMembers?: UserCreateManyWithoutCampaignsInput;
  orgs?: OrgCreateManyWithoutCampaignsInput;
  posts?: PostCreateManyWithoutCampaignInput;
}

export interface UserCreateManyWithoutCampaignsAsLeadInput {
  create?:
    | UserCreateWithoutCampaignsAsLeadInput[]
    | UserCreateWithoutCampaignsAsLeadInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutCampaignsAsLeadInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface LocationCreateManyWithoutUserInput {
  create?: LocationCreateWithoutUserInput[] | LocationCreateWithoutUserInput;
  connect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
}

export interface LocationCreateWithoutUserInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
  post?: PostCreateOneWithoutLocationInput;
}

export interface PostCreateOneWithoutLocationInput {
  create?: PostCreateWithoutLocationInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutLocationInput {
  name?: String;
  caption?: String;
  owner?: UserCreateOneWithoutPostsInput;
  campaign?: CampaignCreateOneWithoutPostsInput;
  org?: OrgCreateOneWithoutPostsInput;
  medias?: MediaCreateManyWithoutPostInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
}

export interface OrgCreateManyWithoutOrgMembersInput {
  create?: OrgCreateWithoutOrgMembersInput[] | OrgCreateWithoutOrgMembersInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
}

export interface OrgCreateWithoutOrgMembersInput {
  name?: String;
  owner?: UserCreateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserCreateManyWithoutOrgsAsAdminInput;
  campaigns?: CampaignCreateManyWithoutOrgsInput;
  posts?: PostCreateManyWithoutOrgInput;
}

export interface UserCreateOneWithoutOrgsAsOwnerInput {
  create?: UserCreateWithoutOrgsAsOwnerInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutOrgsAsOwnerInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface OrgCreateManyWithoutOrgAdminsInput {
  create?: OrgCreateWithoutOrgAdminsInput[] | OrgCreateWithoutOrgAdminsInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
}

export interface OrgCreateWithoutOrgAdminsInput {
  name?: String;
  owner?: UserCreateOneWithoutOrgsAsOwnerInput;
  orgMembers?: UserCreateManyWithoutOrgsInput;
  campaigns?: CampaignCreateManyWithoutOrgsInput;
  posts?: PostCreateManyWithoutOrgInput;
}

export interface UserCreateManyWithoutOrgsInput {
  create?: UserCreateWithoutOrgsInput[] | UserCreateWithoutOrgsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutOrgsInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface OrgCreateManyWithoutOwnerInput {
  create?: OrgCreateWithoutOwnerInput[] | OrgCreateWithoutOwnerInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
}

export interface OrgCreateWithoutOwnerInput {
  name?: String;
  orgAdmins?: UserCreateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserCreateManyWithoutOrgsInput;
  campaigns?: CampaignCreateManyWithoutOrgsInput;
  posts?: PostCreateManyWithoutOrgInput;
}

export interface UserCreateManyWithoutOrgsAsAdminInput {
  create?:
    | UserCreateWithoutOrgsAsAdminInput[]
    | UserCreateWithoutOrgsAsAdminInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutOrgsAsAdminInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface CampaignCreateManyWithoutCampaignMembersInput {
  create?:
    | CampaignCreateWithoutCampaignMembersInput[]
    | CampaignCreateWithoutCampaignMembersInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
}

export interface CampaignCreateWithoutCampaignMembersInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserCreateManyWithoutCampaignsAsLeadInput;
  orgs?: OrgCreateManyWithoutCampaignsInput;
  posts?: PostCreateManyWithoutCampaignInput;
}

export interface OrgCreateManyWithoutCampaignsInput {
  create?: OrgCreateWithoutCampaignsInput[] | OrgCreateWithoutCampaignsInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
}

export interface OrgCreateWithoutCampaignsInput {
  name?: String;
  owner?: UserCreateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserCreateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserCreateManyWithoutOrgsInput;
  posts?: PostCreateManyWithoutOrgInput;
}

export interface PostCreateManyWithoutOrgInput {
  create?: PostCreateWithoutOrgInput[] | PostCreateWithoutOrgInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutOrgInput {
  name?: String;
  caption?: String;
  owner?: UserCreateOneWithoutPostsInput;
  campaign?: CampaignCreateOneWithoutPostsInput;
  medias?: MediaCreateManyWithoutPostInput;
  location?: LocationCreateOneWithoutPostInput;
}

export interface CampaignCreateOneWithoutPostsInput {
  create?: CampaignCreateWithoutPostsInput;
  connect?: CampaignWhereUniqueInput;
}

export interface CampaignCreateWithoutPostsInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserCreateManyWithoutCampaignsAsLeadInput;
  campaignMembers?: UserCreateManyWithoutCampaignsInput;
  orgs?: OrgCreateManyWithoutCampaignsInput;
}

export interface UserCreateManyWithoutCampaignsInput {
  create?: UserCreateWithoutCampaignsInput[] | UserCreateWithoutCampaignsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutCampaignsInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface CampaignCreateManyWithoutCampaignLeadsInput {
  create?:
    | CampaignCreateWithoutCampaignLeadsInput[]
    | CampaignCreateWithoutCampaignLeadsInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
}

export interface CampaignCreateWithoutCampaignLeadsInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignMembers?: UserCreateManyWithoutCampaignsInput;
  orgs?: OrgCreateManyWithoutCampaignsInput;
  posts?: PostCreateManyWithoutCampaignInput;
}

export interface PostCreateManyWithoutCampaignInput {
  create?: PostCreateWithoutCampaignInput[] | PostCreateWithoutCampaignInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutCampaignInput {
  name?: String;
  caption?: String;
  owner?: UserCreateOneWithoutPostsInput;
  org?: OrgCreateOneWithoutPostsInput;
  medias?: MediaCreateManyWithoutPostInput;
  location?: LocationCreateOneWithoutPostInput;
}

export interface OrgCreateOneWithoutPostsInput {
  create?: OrgCreateWithoutPostsInput;
  connect?: OrgWhereUniqueInput;
}

export interface OrgCreateWithoutPostsInput {
  name?: String;
  owner?: UserCreateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserCreateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserCreateManyWithoutOrgsInput;
  campaigns?: CampaignCreateManyWithoutOrgsInput;
}

export interface CampaignCreateManyWithoutOrgsInput {
  create?: CampaignCreateWithoutOrgsInput[] | CampaignCreateWithoutOrgsInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
}

export interface CampaignCreateWithoutOrgsInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserCreateManyWithoutCampaignsAsLeadInput;
  campaignMembers?: UserCreateManyWithoutCampaignsInput;
  posts?: PostCreateManyWithoutCampaignInput;
}

export interface MediaCreateManyWithoutPostInput {
  create?: MediaCreateWithoutPostInput[] | MediaCreateWithoutPostInput;
  connect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
}

export interface MediaCreateWithoutPostInput {
  name?: String;
  contentType: String;
  url: String;
  secret?: String;
}

export interface LocationCreateOneWithoutPostInput {
  create?: LocationCreateWithoutPostInput;
  connect?: LocationWhereUniqueInput;
}

export interface LocationCreateWithoutPostInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
  user?: UserCreateOneWithoutLocationsInput;
}

export interface UserCreateOneWithoutLocationsInput {
  create?: UserCreateWithoutLocationsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutLocationsInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface PostCreateManyWithoutOwnerInput {
  create?: PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutOwnerInput {
  name?: String;
  caption?: String;
  campaign?: CampaignCreateOneWithoutPostsInput;
  org?: OrgCreateOneWithoutPostsInput;
  medias?: MediaCreateManyWithoutPostInput;
  location?: LocationCreateOneWithoutPostInput;
}

export interface CampaignUpdateInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserUpdateManyWithoutCampaignsAsLeadInput;
  campaignMembers?: UserUpdateManyWithoutCampaignsInput;
  orgs?: OrgUpdateManyWithoutCampaignsInput;
  posts?: PostUpdateManyWithoutCampaignInput;
}

export interface UserUpdateManyWithoutCampaignsAsLeadInput {
  create?:
    | UserCreateWithoutCampaignsAsLeadInput[]
    | UserCreateWithoutCampaignsAsLeadInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutCampaignsAsLeadInput[]
    | UserUpdateWithWhereUniqueWithoutCampaignsAsLeadInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutCampaignsAsLeadInput[]
    | UserUpsertWithWhereUniqueWithoutCampaignsAsLeadInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutCampaignsAsLeadInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCampaignsAsLeadDataInput;
}

export interface UserUpdateWithoutCampaignsAsLeadDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface LocationUpdateManyWithoutUserInput {
  create?: LocationCreateWithoutUserInput[] | LocationCreateWithoutUserInput;
  delete?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
  connect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
  disconnect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
  update?:
    | LocationUpdateWithWhereUniqueWithoutUserInput[]
    | LocationUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | LocationUpsertWithWhereUniqueWithoutUserInput[]
    | LocationUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: LocationScalarWhereInput[] | LocationScalarWhereInput;
  updateMany?:
    | LocationUpdateManyWithWhereNestedInput[]
    | LocationUpdateManyWithWhereNestedInput;
}

export interface LocationUpdateWithWhereUniqueWithoutUserInput {
  where: LocationWhereUniqueInput;
  data: LocationUpdateWithoutUserDataInput;
}

export interface LocationUpdateWithoutUserDataInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
  post?: PostUpdateOneWithoutLocationInput;
}

export interface PostUpdateOneWithoutLocationInput {
  create?: PostCreateWithoutLocationInput;
  update?: PostUpdateWithoutLocationDataInput;
  upsert?: PostUpsertWithoutLocationInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutLocationDataInput {
  name?: String;
  caption?: String;
  owner?: UserUpdateOneWithoutPostsInput;
  campaign?: CampaignUpdateOneWithoutPostsInput;
  org?: OrgUpdateOneWithoutPostsInput;
  medias?: MediaUpdateManyWithoutPostInput;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
}

export interface OrgUpdateManyWithoutOrgMembersInput {
  create?: OrgCreateWithoutOrgMembersInput[] | OrgCreateWithoutOrgMembersInput;
  delete?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  disconnect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  update?:
    | OrgUpdateWithWhereUniqueWithoutOrgMembersInput[]
    | OrgUpdateWithWhereUniqueWithoutOrgMembersInput;
  upsert?:
    | OrgUpsertWithWhereUniqueWithoutOrgMembersInput[]
    | OrgUpsertWithWhereUniqueWithoutOrgMembersInput;
  deleteMany?: OrgScalarWhereInput[] | OrgScalarWhereInput;
  updateMany?:
    | OrgUpdateManyWithWhereNestedInput[]
    | OrgUpdateManyWithWhereNestedInput;
}

export interface OrgUpdateWithWhereUniqueWithoutOrgMembersInput {
  where: OrgWhereUniqueInput;
  data: OrgUpdateWithoutOrgMembersDataInput;
}

export interface OrgUpdateWithoutOrgMembersDataInput {
  name?: String;
  owner?: UserUpdateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserUpdateManyWithoutOrgsAsAdminInput;
  campaigns?: CampaignUpdateManyWithoutOrgsInput;
  posts?: PostUpdateManyWithoutOrgInput;
}

export interface UserUpdateOneWithoutOrgsAsOwnerInput {
  create?: UserCreateWithoutOrgsAsOwnerInput;
  update?: UserUpdateWithoutOrgsAsOwnerDataInput;
  upsert?: UserUpsertWithoutOrgsAsOwnerInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutOrgsAsOwnerDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface OrgUpdateManyWithoutOrgAdminsInput {
  create?: OrgCreateWithoutOrgAdminsInput[] | OrgCreateWithoutOrgAdminsInput;
  delete?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  disconnect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  update?:
    | OrgUpdateWithWhereUniqueWithoutOrgAdminsInput[]
    | OrgUpdateWithWhereUniqueWithoutOrgAdminsInput;
  upsert?:
    | OrgUpsertWithWhereUniqueWithoutOrgAdminsInput[]
    | OrgUpsertWithWhereUniqueWithoutOrgAdminsInput;
  deleteMany?: OrgScalarWhereInput[] | OrgScalarWhereInput;
  updateMany?:
    | OrgUpdateManyWithWhereNestedInput[]
    | OrgUpdateManyWithWhereNestedInput;
}

export interface OrgUpdateWithWhereUniqueWithoutOrgAdminsInput {
  where: OrgWhereUniqueInput;
  data: OrgUpdateWithoutOrgAdminsDataInput;
}

export interface OrgUpdateWithoutOrgAdminsDataInput {
  name?: String;
  owner?: UserUpdateOneWithoutOrgsAsOwnerInput;
  orgMembers?: UserUpdateManyWithoutOrgsInput;
  campaigns?: CampaignUpdateManyWithoutOrgsInput;
  posts?: PostUpdateManyWithoutOrgInput;
}

export interface UserUpdateManyWithoutOrgsInput {
  create?: UserCreateWithoutOrgsInput[] | UserCreateWithoutOrgsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutOrgsInput[]
    | UserUpdateWithWhereUniqueWithoutOrgsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutOrgsInput[]
    | UserUpsertWithWhereUniqueWithoutOrgsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutOrgsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrgsDataInput;
}

export interface UserUpdateWithoutOrgsDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface OrgUpdateManyWithoutOwnerInput {
  create?: OrgCreateWithoutOwnerInput[] | OrgCreateWithoutOwnerInput;
  delete?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  disconnect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  update?:
    | OrgUpdateWithWhereUniqueWithoutOwnerInput[]
    | OrgUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | OrgUpsertWithWhereUniqueWithoutOwnerInput[]
    | OrgUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: OrgScalarWhereInput[] | OrgScalarWhereInput;
  updateMany?:
    | OrgUpdateManyWithWhereNestedInput[]
    | OrgUpdateManyWithWhereNestedInput;
}

export interface OrgUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrgWhereUniqueInput;
  data: OrgUpdateWithoutOwnerDataInput;
}

export interface OrgUpdateWithoutOwnerDataInput {
  name?: String;
  orgAdmins?: UserUpdateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserUpdateManyWithoutOrgsInput;
  campaigns?: CampaignUpdateManyWithoutOrgsInput;
  posts?: PostUpdateManyWithoutOrgInput;
}

export interface UserUpdateManyWithoutOrgsAsAdminInput {
  create?:
    | UserCreateWithoutOrgsAsAdminInput[]
    | UserCreateWithoutOrgsAsAdminInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutOrgsAsAdminInput[]
    | UserUpdateWithWhereUniqueWithoutOrgsAsAdminInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutOrgsAsAdminInput[]
    | UserUpsertWithWhereUniqueWithoutOrgsAsAdminInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutOrgsAsAdminInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrgsAsAdminDataInput;
}

export interface UserUpdateWithoutOrgsAsAdminDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface CampaignUpdateManyWithoutCampaignMembersInput {
  create?:
    | CampaignCreateWithoutCampaignMembersInput[]
    | CampaignCreateWithoutCampaignMembersInput;
  delete?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  disconnect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  update?:
    | CampaignUpdateWithWhereUniqueWithoutCampaignMembersInput[]
    | CampaignUpdateWithWhereUniqueWithoutCampaignMembersInput;
  upsert?:
    | CampaignUpsertWithWhereUniqueWithoutCampaignMembersInput[]
    | CampaignUpsertWithWhereUniqueWithoutCampaignMembersInput;
  deleteMany?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  updateMany?:
    | CampaignUpdateManyWithWhereNestedInput[]
    | CampaignUpdateManyWithWhereNestedInput;
}

export interface CampaignUpdateWithWhereUniqueWithoutCampaignMembersInput {
  where: CampaignWhereUniqueInput;
  data: CampaignUpdateWithoutCampaignMembersDataInput;
}

export interface CampaignUpdateWithoutCampaignMembersDataInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserUpdateManyWithoutCampaignsAsLeadInput;
  orgs?: OrgUpdateManyWithoutCampaignsInput;
  posts?: PostUpdateManyWithoutCampaignInput;
}

export interface OrgUpdateManyWithoutCampaignsInput {
  create?: OrgCreateWithoutCampaignsInput[] | OrgCreateWithoutCampaignsInput;
  delete?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  connect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  disconnect?: OrgWhereUniqueInput[] | OrgWhereUniqueInput;
  update?:
    | OrgUpdateWithWhereUniqueWithoutCampaignsInput[]
    | OrgUpdateWithWhereUniqueWithoutCampaignsInput;
  upsert?:
    | OrgUpsertWithWhereUniqueWithoutCampaignsInput[]
    | OrgUpsertWithWhereUniqueWithoutCampaignsInput;
  deleteMany?: OrgScalarWhereInput[] | OrgScalarWhereInput;
  updateMany?:
    | OrgUpdateManyWithWhereNestedInput[]
    | OrgUpdateManyWithWhereNestedInput;
}

export interface OrgUpdateWithWhereUniqueWithoutCampaignsInput {
  where: OrgWhereUniqueInput;
  data: OrgUpdateWithoutCampaignsDataInput;
}

export interface OrgUpdateWithoutCampaignsDataInput {
  name?: String;
  owner?: UserUpdateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserUpdateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserUpdateManyWithoutOrgsInput;
  posts?: PostUpdateManyWithoutOrgInput;
}

export interface PostUpdateManyWithoutOrgInput {
  create?: PostCreateWithoutOrgInput[] | PostCreateWithoutOrgInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutOrgInput[]
    | PostUpdateWithWhereUniqueWithoutOrgInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutOrgInput[]
    | PostUpsertWithWhereUniqueWithoutOrgInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutOrgInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutOrgDataInput;
}

export interface PostUpdateWithoutOrgDataInput {
  name?: String;
  caption?: String;
  owner?: UserUpdateOneWithoutPostsInput;
  campaign?: CampaignUpdateOneWithoutPostsInput;
  medias?: MediaUpdateManyWithoutPostInput;
  location?: LocationUpdateOneWithoutPostInput;
}

export interface CampaignUpdateOneWithoutPostsInput {
  create?: CampaignCreateWithoutPostsInput;
  update?: CampaignUpdateWithoutPostsDataInput;
  upsert?: CampaignUpsertWithoutPostsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CampaignWhereUniqueInput;
}

export interface CampaignUpdateWithoutPostsDataInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserUpdateManyWithoutCampaignsAsLeadInput;
  campaignMembers?: UserUpdateManyWithoutCampaignsInput;
  orgs?: OrgUpdateManyWithoutCampaignsInput;
}

export interface UserUpdateManyWithoutCampaignsInput {
  create?: UserCreateWithoutCampaignsInput[] | UserCreateWithoutCampaignsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutCampaignsInput[]
    | UserUpdateWithWhereUniqueWithoutCampaignsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutCampaignsInput[]
    | UserUpsertWithWhereUniqueWithoutCampaignsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutCampaignsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCampaignsDataInput;
}

export interface UserUpdateWithoutCampaignsDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface CampaignUpdateManyWithoutCampaignLeadsInput {
  create?:
    | CampaignCreateWithoutCampaignLeadsInput[]
    | CampaignCreateWithoutCampaignLeadsInput;
  delete?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  disconnect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  update?:
    | CampaignUpdateWithWhereUniqueWithoutCampaignLeadsInput[]
    | CampaignUpdateWithWhereUniqueWithoutCampaignLeadsInput;
  upsert?:
    | CampaignUpsertWithWhereUniqueWithoutCampaignLeadsInput[]
    | CampaignUpsertWithWhereUniqueWithoutCampaignLeadsInput;
  deleteMany?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  updateMany?:
    | CampaignUpdateManyWithWhereNestedInput[]
    | CampaignUpdateManyWithWhereNestedInput;
}

export interface CampaignUpdateWithWhereUniqueWithoutCampaignLeadsInput {
  where: CampaignWhereUniqueInput;
  data: CampaignUpdateWithoutCampaignLeadsDataInput;
}

export interface CampaignUpdateWithoutCampaignLeadsDataInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignMembers?: UserUpdateManyWithoutCampaignsInput;
  orgs?: OrgUpdateManyWithoutCampaignsInput;
  posts?: PostUpdateManyWithoutCampaignInput;
}

export interface PostUpdateManyWithoutCampaignInput {
  create?: PostCreateWithoutCampaignInput[] | PostCreateWithoutCampaignInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutCampaignInput[]
    | PostUpdateWithWhereUniqueWithoutCampaignInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutCampaignInput[]
    | PostUpsertWithWhereUniqueWithoutCampaignInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutCampaignInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutCampaignDataInput;
}

export interface PostUpdateWithoutCampaignDataInput {
  name?: String;
  caption?: String;
  owner?: UserUpdateOneWithoutPostsInput;
  org?: OrgUpdateOneWithoutPostsInput;
  medias?: MediaUpdateManyWithoutPostInput;
  location?: LocationUpdateOneWithoutPostInput;
}

export interface OrgUpdateOneWithoutPostsInput {
  create?: OrgCreateWithoutPostsInput;
  update?: OrgUpdateWithoutPostsDataInput;
  upsert?: OrgUpsertWithoutPostsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: OrgWhereUniqueInput;
}

export interface OrgUpdateWithoutPostsDataInput {
  name?: String;
  owner?: UserUpdateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserUpdateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserUpdateManyWithoutOrgsInput;
  campaigns?: CampaignUpdateManyWithoutOrgsInput;
}

export interface CampaignUpdateManyWithoutOrgsInput {
  create?: CampaignCreateWithoutOrgsInput[] | CampaignCreateWithoutOrgsInput;
  delete?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  disconnect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  update?:
    | CampaignUpdateWithWhereUniqueWithoutOrgsInput[]
    | CampaignUpdateWithWhereUniqueWithoutOrgsInput;
  upsert?:
    | CampaignUpsertWithWhereUniqueWithoutOrgsInput[]
    | CampaignUpsertWithWhereUniqueWithoutOrgsInput;
  deleteMany?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  updateMany?:
    | CampaignUpdateManyWithWhereNestedInput[]
    | CampaignUpdateManyWithWhereNestedInput;
}

export interface CampaignUpdateWithWhereUniqueWithoutOrgsInput {
  where: CampaignWhereUniqueInput;
  data: CampaignUpdateWithoutOrgsDataInput;
}

export interface CampaignUpdateWithoutOrgsDataInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
  campaignLeads?: UserUpdateManyWithoutCampaignsAsLeadInput;
  campaignMembers?: UserUpdateManyWithoutCampaignsInput;
  posts?: PostUpdateManyWithoutCampaignInput;
}

export interface CampaignUpsertWithWhereUniqueWithoutOrgsInput {
  where: CampaignWhereUniqueInput;
  update: CampaignUpdateWithoutOrgsDataInput;
  create: CampaignCreateWithoutOrgsInput;
}

export interface CampaignScalarWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  instructions?: String;
  instructions_not?: String;
  instructions_in?: String[] | String;
  instructions_not_in?: String[] | String;
  instructions_lt?: String;
  instructions_lte?: String;
  instructions_gt?: String;
  instructions_gte?: String;
  instructions_contains?: String;
  instructions_not_contains?: String;
  instructions_starts_with?: String;
  instructions_not_starts_with?: String;
  instructions_ends_with?: String;
  instructions_not_ends_with?: String;
  startDateTime?: DateTimeInput;
  startDateTime_not?: DateTimeInput;
  startDateTime_in?: DateTimeInput[] | DateTimeInput;
  startDateTime_not_in?: DateTimeInput[] | DateTimeInput;
  startDateTime_lt?: DateTimeInput;
  startDateTime_lte?: DateTimeInput;
  startDateTime_gt?: DateTimeInput;
  startDateTime_gte?: DateTimeInput;
  endDateTime?: DateTimeInput;
  endDateTime_not?: DateTimeInput;
  endDateTime_in?: DateTimeInput[] | DateTimeInput;
  endDateTime_not_in?: DateTimeInput[] | DateTimeInput;
  endDateTime_lt?: DateTimeInput;
  endDateTime_lte?: DateTimeInput;
  endDateTime_gt?: DateTimeInput;
  endDateTime_gte?: DateTimeInput;
  AND?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  OR?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  NOT?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
}

export interface CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput;
  data: CampaignUpdateManyDataInput;
}

export interface CampaignUpdateManyDataInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
}

export interface OrgUpsertWithoutPostsInput {
  update: OrgUpdateWithoutPostsDataInput;
  create: OrgCreateWithoutPostsInput;
}

export interface MediaUpdateManyWithoutPostInput {
  create?: MediaCreateWithoutPostInput[] | MediaCreateWithoutPostInput;
  delete?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  connect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  disconnect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  update?:
    | MediaUpdateWithWhereUniqueWithoutPostInput[]
    | MediaUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | MediaUpsertWithWhereUniqueWithoutPostInput[]
    | MediaUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  updateMany?:
    | MediaUpdateManyWithWhereNestedInput[]
    | MediaUpdateManyWithWhereNestedInput;
}

export interface MediaUpdateWithWhereUniqueWithoutPostInput {
  where: MediaWhereUniqueInput;
  data: MediaUpdateWithoutPostDataInput;
}

export interface MediaUpdateWithoutPostDataInput {
  name?: String;
  contentType?: String;
  url?: String;
  secret?: String;
}

export interface MediaUpsertWithWhereUniqueWithoutPostInput {
  where: MediaWhereUniqueInput;
  update: MediaUpdateWithoutPostDataInput;
  create: MediaCreateWithoutPostInput;
}

export interface MediaScalarWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  contentType?: String;
  contentType_not?: String;
  contentType_in?: String[] | String;
  contentType_not_in?: String[] | String;
  contentType_lt?: String;
  contentType_lte?: String;
  contentType_gt?: String;
  contentType_gte?: String;
  contentType_contains?: String;
  contentType_not_contains?: String;
  contentType_starts_with?: String;
  contentType_not_starts_with?: String;
  contentType_ends_with?: String;
  contentType_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  secret?: String;
  secret_not?: String;
  secret_in?: String[] | String;
  secret_not_in?: String[] | String;
  secret_lt?: String;
  secret_lte?: String;
  secret_gt?: String;
  secret_gte?: String;
  secret_contains?: String;
  secret_not_contains?: String;
  secret_starts_with?: String;
  secret_not_starts_with?: String;
  secret_ends_with?: String;
  secret_not_ends_with?: String;
  AND?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  OR?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  NOT?: MediaScalarWhereInput[] | MediaScalarWhereInput;
}

export interface MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput;
  data: MediaUpdateManyDataInput;
}

export interface MediaUpdateManyDataInput {
  name?: String;
  contentType?: String;
  url?: String;
  secret?: String;
}

export interface LocationUpdateOneWithoutPostInput {
  create?: LocationCreateWithoutPostInput;
  update?: LocationUpdateWithoutPostDataInput;
  upsert?: LocationUpsertWithoutPostInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LocationWhereUniqueInput;
}

export interface LocationUpdateWithoutPostDataInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
  user?: UserUpdateOneWithoutLocationsInput;
}

export interface UserUpdateOneWithoutLocationsInput {
  create?: UserCreateWithoutLocationsInput;
  update?: UserUpdateWithoutLocationsDataInput;
  upsert?: UserUpsertWithoutLocationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutLocationsDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface PostUpdateManyWithoutOwnerInput {
  create?: PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutOwnerInput[]
    | PostUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutOwnerInput[]
    | PostUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutOwnerDataInput;
}

export interface PostUpdateWithoutOwnerDataInput {
  name?: String;
  caption?: String;
  campaign?: CampaignUpdateOneWithoutPostsInput;
  org?: OrgUpdateOneWithoutPostsInput;
  medias?: MediaUpdateManyWithoutPostInput;
  location?: LocationUpdateOneWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutOwnerDataInput;
  create: PostCreateWithoutOwnerInput;
}

export interface PostScalarWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  caption?: String;
  caption_not?: String;
  caption_in?: String[] | String;
  caption_not_in?: String[] | String;
  caption_lt?: String;
  caption_lte?: String;
  caption_gt?: String;
  caption_gte?: String;
  caption_contains?: String;
  caption_not_contains?: String;
  caption_starts_with?: String;
  caption_not_starts_with?: String;
  caption_ends_with?: String;
  caption_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  name?: String;
  caption?: String;
}

export interface UserUpsertWithoutLocationsInput {
  update: UserUpdateWithoutLocationsDataInput;
  create: UserCreateWithoutLocationsInput;
}

export interface LocationUpsertWithoutPostInput {
  update: LocationUpdateWithoutPostDataInput;
  create: LocationCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutCampaignInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutCampaignDataInput;
  create: PostCreateWithoutCampaignInput;
}

export interface CampaignUpsertWithWhereUniqueWithoutCampaignLeadsInput {
  where: CampaignWhereUniqueInput;
  update: CampaignUpdateWithoutCampaignLeadsDataInput;
  create: CampaignCreateWithoutCampaignLeadsInput;
}

export interface UserUpsertWithWhereUniqueWithoutCampaignsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCampaignsDataInput;
  create: UserCreateWithoutCampaignsInput;
}

export interface UserScalarWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  profileImgUrl?: String;
  profileImgUrl_not?: String;
  profileImgUrl_in?: String[] | String;
  profileImgUrl_not_in?: String[] | String;
  profileImgUrl_lt?: String;
  profileImgUrl_lte?: String;
  profileImgUrl_gt?: String;
  profileImgUrl_gte?: String;
  profileImgUrl_contains?: String;
  profileImgUrl_not_contains?: String;
  profileImgUrl_starts_with?: String;
  profileImgUrl_not_starts_with?: String;
  profileImgUrl_ends_with?: String;
  profileImgUrl_not_ends_with?: String;
  facebookHandle?: String;
  facebookHandle_not?: String;
  facebookHandle_in?: String[] | String;
  facebookHandle_not_in?: String[] | String;
  facebookHandle_lt?: String;
  facebookHandle_lte?: String;
  facebookHandle_gt?: String;
  facebookHandle_gte?: String;
  facebookHandle_contains?: String;
  facebookHandle_not_contains?: String;
  facebookHandle_starts_with?: String;
  facebookHandle_not_starts_with?: String;
  facebookHandle_ends_with?: String;
  facebookHandle_not_ends_with?: String;
  instagramHandle?: String;
  instagramHandle_not?: String;
  instagramHandle_in?: String[] | String;
  instagramHandle_not_in?: String[] | String;
  instagramHandle_lt?: String;
  instagramHandle_lte?: String;
  instagramHandle_gt?: String;
  instagramHandle_gte?: String;
  instagramHandle_contains?: String;
  instagramHandle_not_contains?: String;
  instagramHandle_starts_with?: String;
  instagramHandle_not_starts_with?: String;
  instagramHandle_ends_with?: String;
  instagramHandle_not_ends_with?: String;
  twitterHandle?: String;
  twitterHandle_not?: String;
  twitterHandle_in?: String[] | String;
  twitterHandle_not_in?: String[] | String;
  twitterHandle_lt?: String;
  twitterHandle_lte?: String;
  twitterHandle_gt?: String;
  twitterHandle_gte?: String;
  twitterHandle_contains?: String;
  twitterHandle_not_contains?: String;
  twitterHandle_starts_with?: String;
  twitterHandle_not_starts_with?: String;
  twitterHandle_ends_with?: String;
  twitterHandle_not_ends_with?: String;
  snapchatHandle?: String;
  snapchatHandle_not?: String;
  snapchatHandle_in?: String[] | String;
  snapchatHandle_not_in?: String[] | String;
  snapchatHandle_lt?: String;
  snapchatHandle_lte?: String;
  snapchatHandle_gt?: String;
  snapchatHandle_gte?: String;
  snapchatHandle_contains?: String;
  snapchatHandle_not_contains?: String;
  snapchatHandle_starts_with?: String;
  snapchatHandle_not_starts_with?: String;
  snapchatHandle_ends_with?: String;
  snapchatHandle_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
}

export interface CampaignUpsertWithoutPostsInput {
  update: CampaignUpdateWithoutPostsDataInput;
  create: CampaignCreateWithoutPostsInput;
}

export interface PostUpsertWithWhereUniqueWithoutOrgInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutOrgDataInput;
  create: PostCreateWithoutOrgInput;
}

export interface OrgUpsertWithWhereUniqueWithoutCampaignsInput {
  where: OrgWhereUniqueInput;
  update: OrgUpdateWithoutCampaignsDataInput;
  create: OrgCreateWithoutCampaignsInput;
}

export interface OrgScalarWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: OrgScalarWhereInput[] | OrgScalarWhereInput;
  OR?: OrgScalarWhereInput[] | OrgScalarWhereInput;
  NOT?: OrgScalarWhereInput[] | OrgScalarWhereInput;
}

export interface OrgUpdateManyWithWhereNestedInput {
  where: OrgScalarWhereInput;
  data: OrgUpdateManyDataInput;
}

export interface OrgUpdateManyDataInput {
  name?: String;
}

export interface CampaignUpsertWithWhereUniqueWithoutCampaignMembersInput {
  where: CampaignWhereUniqueInput;
  update: CampaignUpdateWithoutCampaignMembersDataInput;
  create: CampaignCreateWithoutCampaignMembersInput;
}

export interface UserUpsertWithWhereUniqueWithoutOrgsAsAdminInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrgsAsAdminDataInput;
  create: UserCreateWithoutOrgsAsAdminInput;
}

export interface OrgUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrgWhereUniqueInput;
  update: OrgUpdateWithoutOwnerDataInput;
  create: OrgCreateWithoutOwnerInput;
}

export interface UserUpsertWithWhereUniqueWithoutOrgsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrgsDataInput;
  create: UserCreateWithoutOrgsInput;
}

export interface OrgUpsertWithWhereUniqueWithoutOrgAdminsInput {
  where: OrgWhereUniqueInput;
  update: OrgUpdateWithoutOrgAdminsDataInput;
  create: OrgCreateWithoutOrgAdminsInput;
}

export interface UserUpsertWithoutOrgsAsOwnerInput {
  update: UserUpdateWithoutOrgsAsOwnerDataInput;
  create: UserCreateWithoutOrgsAsOwnerInput;
}

export interface OrgUpsertWithWhereUniqueWithoutOrgMembersInput {
  where: OrgWhereUniqueInput;
  update: OrgUpdateWithoutOrgMembersDataInput;
  create: OrgCreateWithoutOrgMembersInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutLocationInput {
  update: PostUpdateWithoutLocationDataInput;
  create: PostCreateWithoutLocationInput;
}

export interface LocationUpsertWithWhereUniqueWithoutUserInput {
  where: LocationWhereUniqueInput;
  update: LocationUpdateWithoutUserDataInput;
  create: LocationCreateWithoutUserInput;
}

export interface LocationScalarWhereInput {
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  region?: String;
  region_not?: String;
  region_in?: String[] | String;
  region_not_in?: String[] | String;
  region_lt?: String;
  region_lte?: String;
  region_gt?: String;
  region_gte?: String;
  region_contains?: String;
  region_not_contains?: String;
  region_starts_with?: String;
  region_not_starts_with?: String;
  region_ends_with?: String;
  region_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  isoCountryCode?: String;
  isoCountryCode_not?: String;
  isoCountryCode_in?: String[] | String;
  isoCountryCode_not_in?: String[] | String;
  isoCountryCode_lt?: String;
  isoCountryCode_lte?: String;
  isoCountryCode_gt?: String;
  isoCountryCode_gte?: String;
  isoCountryCode_contains?: String;
  isoCountryCode_not_contains?: String;
  isoCountryCode_starts_with?: String;
  isoCountryCode_not_starts_with?: String;
  isoCountryCode_ends_with?: String;
  isoCountryCode_not_ends_with?: String;
  postalCode?: String;
  postalCode_not?: String;
  postalCode_in?: String[] | String;
  postalCode_not_in?: String[] | String;
  postalCode_lt?: String;
  postalCode_lte?: String;
  postalCode_gt?: String;
  postalCode_gte?: String;
  postalCode_contains?: String;
  postalCode_not_contains?: String;
  postalCode_starts_with?: String;
  postalCode_not_starts_with?: String;
  postalCode_ends_with?: String;
  postalCode_not_ends_with?: String;
  long?: String;
  long_not?: String;
  long_in?: String[] | String;
  long_not_in?: String[] | String;
  long_lt?: String;
  long_lte?: String;
  long_gt?: String;
  long_gte?: String;
  long_contains?: String;
  long_not_contains?: String;
  long_starts_with?: String;
  long_not_starts_with?: String;
  long_ends_with?: String;
  long_not_ends_with?: String;
  lat?: String;
  lat_not?: String;
  lat_in?: String[] | String;
  lat_not_in?: String[] | String;
  lat_lt?: String;
  lat_lte?: String;
  lat_gt?: String;
  lat_gte?: String;
  lat_contains?: String;
  lat_not_contains?: String;
  lat_starts_with?: String;
  lat_not_starts_with?: String;
  lat_ends_with?: String;
  lat_not_ends_with?: String;
  AND?: LocationScalarWhereInput[] | LocationScalarWhereInput;
  OR?: LocationScalarWhereInput[] | LocationScalarWhereInput;
  NOT?: LocationScalarWhereInput[] | LocationScalarWhereInput;
}

export interface LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput;
  data: LocationUpdateManyDataInput;
}

export interface LocationUpdateManyDataInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
}

export interface UserUpsertWithWhereUniqueWithoutCampaignsAsLeadInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCampaignsAsLeadDataInput;
  create: UserCreateWithoutCampaignsAsLeadInput;
}

export interface CampaignUpdateManyMutationInput {
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeInput;
  endDateTime?: DateTimeInput;
}

export interface LocationCreateInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
  user?: UserCreateOneWithoutLocationsInput;
  post?: PostCreateOneWithoutLocationInput;
}

export interface LocationUpdateInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
  user?: UserUpdateOneWithoutLocationsInput;
  post?: PostUpdateOneWithoutLocationInput;
}

export interface LocationUpdateManyMutationInput {
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
}

export interface MediaCreateInput {
  name?: String;
  post?: PostCreateOneWithoutMediasInput;
  contentType: String;
  url: String;
  secret?: String;
}

export interface PostCreateOneWithoutMediasInput {
  create?: PostCreateWithoutMediasInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutMediasInput {
  name?: String;
  caption?: String;
  owner?: UserCreateOneWithoutPostsInput;
  campaign?: CampaignCreateOneWithoutPostsInput;
  org?: OrgCreateOneWithoutPostsInput;
  location?: LocationCreateOneWithoutPostInput;
}

export interface MediaUpdateInput {
  name?: String;
  post?: PostUpdateOneWithoutMediasInput;
  contentType?: String;
  url?: String;
  secret?: String;
}

export interface PostUpdateOneWithoutMediasInput {
  create?: PostCreateWithoutMediasInput;
  update?: PostUpdateWithoutMediasDataInput;
  upsert?: PostUpsertWithoutMediasInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PostWhereUniqueInput;
}

export interface PostUpdateWithoutMediasDataInput {
  name?: String;
  caption?: String;
  owner?: UserUpdateOneWithoutPostsInput;
  campaign?: CampaignUpdateOneWithoutPostsInput;
  org?: OrgUpdateOneWithoutPostsInput;
  location?: LocationUpdateOneWithoutPostInput;
}

export interface PostUpsertWithoutMediasInput {
  update: PostUpdateWithoutMediasDataInput;
  create: PostCreateWithoutMediasInput;
}

export interface MediaUpdateManyMutationInput {
  name?: String;
  contentType?: String;
  url?: String;
  secret?: String;
}

export interface OrgCreateInput {
  name?: String;
  owner?: UserCreateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserCreateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserCreateManyWithoutOrgsInput;
  campaigns?: CampaignCreateManyWithoutOrgsInput;
  posts?: PostCreateManyWithoutOrgInput;
}

export interface OrgUpdateInput {
  name?: String;
  owner?: UserUpdateOneWithoutOrgsAsOwnerInput;
  orgAdmins?: UserUpdateManyWithoutOrgsAsAdminInput;
  orgMembers?: UserUpdateManyWithoutOrgsInput;
  campaigns?: CampaignUpdateManyWithoutOrgsInput;
  posts?: PostUpdateManyWithoutOrgInput;
}

export interface OrgUpdateManyMutationInput {
  name?: String;
}

export interface PostCreateInput {
  name?: String;
  caption?: String;
  owner?: UserCreateOneWithoutPostsInput;
  campaign?: CampaignCreateOneWithoutPostsInput;
  org?: OrgCreateOneWithoutPostsInput;
  medias?: MediaCreateManyWithoutPostInput;
  location?: LocationCreateOneWithoutPostInput;
}

export interface PostUpdateInput {
  name?: String;
  caption?: String;
  owner?: UserUpdateOneWithoutPostsInput;
  campaign?: CampaignUpdateOneWithoutPostsInput;
  org?: OrgUpdateOneWithoutPostsInput;
  medias?: MediaUpdateManyWithoutPostInput;
  location?: LocationUpdateOneWithoutPostInput;
}

export interface PostUpdateManyMutationInput {
  name?: String;
  caption?: String;
}

export interface UserCreateInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationCreateManyWithoutUserInput;
  orgs?: OrgCreateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgCreateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgCreateManyWithoutOrgAdminsInput;
  campaigns?: CampaignCreateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignCreateManyWithoutCampaignLeadsInput;
  posts?: PostCreateManyWithoutOwnerInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  orgs?: OrgUpdateManyWithoutOrgMembersInput;
  orgsAsOwner?: OrgUpdateManyWithoutOwnerInput;
  orgsAsAdmin?: OrgUpdateManyWithoutOrgAdminsInput;
  campaigns?: CampaignUpdateManyWithoutCampaignMembersInput;
  campaignsAsLead?: CampaignUpdateManyWithoutCampaignLeadsInput;
  posts?: PostUpdateManyWithoutOwnerInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
}

export interface CampaignSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CampaignWhereInput;
  AND?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
  OR?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
  NOT?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocationWhereInput;
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  NOT?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
}

export interface MediaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MediaWhereInput;
  AND?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
  OR?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
  NOT?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
}

export interface OrgSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrgWhereInput;
  AND?: OrgSubscriptionWhereInput[] | OrgSubscriptionWhereInput;
  OR?: OrgSubscriptionWhereInput[] | OrgSubscriptionWhereInput;
  NOT?: OrgSubscriptionWhereInput[] | OrgSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Campaign {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeOutput;
  endDateTime?: DateTimeOutput;
}

export interface CampaignPromise extends Promise<Campaign>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  instructions: () => Promise<String>;
  startDateTime: () => Promise<DateTimeOutput>;
  endDateTime: () => Promise<DateTimeOutput>;
  campaignLeads: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaignMembers: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgs: <T = FragmentableArray<Org>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CampaignSubscription
  extends Promise<AsyncIterator<Campaign>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  instructions: () => Promise<AsyncIterator<String>>;
  startDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  campaignLeads: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaignMembers: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgs: <T = Promise<AsyncIterator<OrgSubscription>>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  profileImgUrl: () => Promise<String>;
  facebookHandle: () => Promise<String>;
  instagramHandle: () => Promise<String>;
  twitterHandle: () => Promise<String>;
  snapchatHandle: () => Promise<String>;
  locations: <T = FragmentableArray<Location>>(
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgs: <T = FragmentableArray<Org>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgsAsOwner: <T = FragmentableArray<Org>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgsAsAdmin: <T = FragmentableArray<Org>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaigns: <T = FragmentableArray<Campaign>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaignsAsLead: <T = FragmentableArray<Campaign>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  profileImgUrl: () => Promise<AsyncIterator<String>>;
  facebookHandle: () => Promise<AsyncIterator<String>>;
  instagramHandle: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
  snapchatHandle: () => Promise<AsyncIterator<String>>;
  locations: <T = Promise<AsyncIterator<LocationSubscription>>>(
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgs: <T = Promise<AsyncIterator<OrgSubscription>>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgsAsOwner: <T = Promise<AsyncIterator<OrgSubscription>>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgsAsAdmin: <T = Promise<AsyncIterator<OrgSubscription>>>(
    args?: {
      where?: OrgWhereInput;
      orderBy?: OrgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaigns: <T = Promise<AsyncIterator<CampaignSubscription>>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaignsAsLead: <T = Promise<AsyncIterator<CampaignSubscription>>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Location {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  region: () => Promise<String>;
  country: () => Promise<String>;
  isoCountryCode: () => Promise<String>;
  postalCode: () => Promise<String>;
  long: () => Promise<String>;
  lat: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  isoCountryCode: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  long: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
}

export interface Post {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  caption?: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  caption: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  campaign: <T = CampaignPromise>() => T;
  org: <T = OrgPromise>() => T;
  medias: <T = FragmentableArray<Media>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  location: <T = LocationPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  campaign: <T = CampaignSubscription>() => T;
  org: <T = OrgSubscription>() => T;
  medias: <T = Promise<AsyncIterator<MediaSubscription>>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  location: <T = LocationSubscription>() => T;
}

export interface Org {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
}

export interface OrgPromise extends Promise<Org>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  orgAdmins: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgMembers: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaigns: <T = FragmentableArray<Campaign>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface OrgSubscription
  extends Promise<AsyncIterator<Org>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  orgAdmins: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orgMembers: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaigns: <T = Promise<AsyncIterator<CampaignSubscription>>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Media {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  contentType: String;
  url: String;
  secret?: String;
}

export interface MediaPromise extends Promise<Media>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  post: <T = PostPromise>() => T;
  contentType: () => Promise<String>;
  url: () => Promise<String>;
  secret: () => Promise<String>;
}

export interface MediaSubscription
  extends Promise<AsyncIterator<Media>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  post: <T = PostSubscription>() => T;
  contentType: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  secret: () => Promise<AsyncIterator<String>>;
}

export interface CampaignConnection {}

export interface CampaignConnectionPromise
  extends Promise<CampaignConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampaignEdge>>() => T;
  aggregate: <T = AggregateCampaignPromise>() => T;
}

export interface CampaignConnectionSubscription
  extends Promise<AsyncIterator<CampaignConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampaignEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampaignSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CampaignEdge {
  cursor: String;
}

export interface CampaignEdgePromise
  extends Promise<CampaignEdge>,
    Fragmentable {
  node: <T = CampaignPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampaignEdgeSubscription
  extends Promise<AsyncIterator<CampaignEdge>>,
    Fragmentable {
  node: <T = CampaignSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCampaign {
  count: Int;
}

export interface AggregateCampaignPromise
  extends Promise<AggregateCampaign>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampaignSubscription
  extends Promise<AsyncIterator<AggregateCampaign>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationConnection {}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface LocationEdge {
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MediaConnection {}

export interface MediaConnectionPromise
  extends Promise<MediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MediaEdge>>() => T;
  aggregate: <T = AggregateMediaPromise>() => T;
}

export interface MediaConnectionSubscription
  extends Promise<AsyncIterator<MediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMediaSubscription>() => T;
}

export interface MediaEdge {
  cursor: String;
}

export interface MediaEdgePromise extends Promise<MediaEdge>, Fragmentable {
  node: <T = MediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MediaEdgeSubscription
  extends Promise<AsyncIterator<MediaEdge>>,
    Fragmentable {
  node: <T = MediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedia {
  count: Int;
}

export interface AggregateMediaPromise
  extends Promise<AggregateMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMediaSubscription
  extends Promise<AsyncIterator<AggregateMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrgConnection {}

export interface OrgConnectionPromise
  extends Promise<OrgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrgEdge>>() => T;
  aggregate: <T = AggregateOrgPromise>() => T;
}

export interface OrgConnectionSubscription
  extends Promise<AsyncIterator<OrgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrgSubscription>() => T;
}

export interface OrgEdge {
  cursor: String;
}

export interface OrgEdgePromise extends Promise<OrgEdge>, Fragmentable {
  node: <T = OrgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrgEdgeSubscription
  extends Promise<AsyncIterator<OrgEdge>>,
    Fragmentable {
  node: <T = OrgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrg {
  count: Int;
}

export interface AggregateOrgPromise
  extends Promise<AggregateOrg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrgSubscription
  extends Promise<AsyncIterator<AggregateOrg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CampaignSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CampaignSubscriptionPayloadPromise
  extends Promise<CampaignSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampaignPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampaignPreviousValuesPromise>() => T;
}

export interface CampaignSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampaignSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampaignSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampaignPreviousValuesSubscription>() => T;
}

export interface CampaignPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  instructions?: String;
  startDateTime?: DateTimeOutput;
  endDateTime?: DateTimeOutput;
}

export interface CampaignPreviousValuesPromise
  extends Promise<CampaignPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  instructions: () => Promise<String>;
  startDateTime: () => Promise<DateTimeOutput>;
  endDateTime: () => Promise<DateTimeOutput>;
}

export interface CampaignPreviousValuesSubscription
  extends Promise<AsyncIterator<CampaignPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  instructions: () => Promise<AsyncIterator<String>>;
  startDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface LocationPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  street?: String;
  city?: String;
  region?: String;
  country?: String;
  isoCountryCode?: String;
  postalCode?: String;
  long?: String;
  lat?: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  region: () => Promise<String>;
  country: () => Promise<String>;
  isoCountryCode: () => Promise<String>;
  postalCode: () => Promise<String>;
  long: () => Promise<String>;
  lat: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  isoCountryCode: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  long: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
}

export interface MediaSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MediaSubscriptionPayloadPromise
  extends Promise<MediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MediaPreviousValuesPromise>() => T;
}

export interface MediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MediaPreviousValuesSubscription>() => T;
}

export interface MediaPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  contentType: String;
  url: String;
  secret?: String;
}

export interface MediaPreviousValuesPromise
  extends Promise<MediaPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  contentType: () => Promise<String>;
  url: () => Promise<String>;
  secret: () => Promise<String>;
}

export interface MediaPreviousValuesSubscription
  extends Promise<AsyncIterator<MediaPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  contentType: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  secret: () => Promise<AsyncIterator<String>>;
}

export interface OrgSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface OrgSubscriptionPayloadPromise
  extends Promise<OrgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrgPreviousValuesPromise>() => T;
}

export interface OrgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrgPreviousValuesSubscription>() => T;
}

export interface OrgPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
}

export interface OrgPreviousValuesPromise
  extends Promise<OrgPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
}

export interface OrgPreviousValuesSubscription
  extends Promise<AsyncIterator<OrgPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  caption?: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  caption: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: UUID;
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  profileImgUrl?: String;
  facebookHandle?: String;
  instagramHandle?: String;
  twitterHandle?: String;
  snapchatHandle?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  profileImgUrl: () => Promise<String>;
  facebookHandle: () => Promise<String>;
  instagramHandle: () => Promise<String>;
  twitterHandle: () => Promise<String>;
  snapchatHandle: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  profileImgUrl: () => Promise<AsyncIterator<String>>;
  facebookHandle: () => Promise<AsyncIterator<String>>;
  instagramHandle: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
  snapchatHandle: () => Promise<AsyncIterator<String>>;
}

export type UUID = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Campaign",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Media",
    embedded: false
  },
  {
    name: "Org",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
